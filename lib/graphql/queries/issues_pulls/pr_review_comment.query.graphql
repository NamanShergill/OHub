# import './timeline.query.graphql'

query getPRReviewComments($id:ID!, $cursor:String){
    node(id: $id){
        __typename
        ... on PullRequestReview{
           ...PRReviewComments
        }
    }
}

query reviewThreadFirstCommentQuery($name:String!, $owner: String!, $number:Int!, $cursor:String){
    repository(name: $name, owner: $owner) {
        pullRequest(number: $number) {
            id
            reviewThreads(first: 25, after: $cursor) {
                edges{
                    cursor
                    node{
                        id
                        viewerCanResolve
                        viewerCanUnresolve
                        viewerCanReply
                        isOutdated
                        isCollapsed
                        isResolved
                        comments(first: 1) {
                          totalCount
                            nodes {
                                id
                            }
                        }
                    }
                }
            }
        }
    }
}
query reviewThreadCommentsQuery($nodeID:ID!, $cursor:String){
    node(id: $nodeID){
        __typename
        ...on PullRequestReviewThread{
            comments(first: 10, after: $cursor) {
                edges{
                    cursor
                    node{
                        ...pullRequestReviewComment
                    }
                }
            }
        }
    }
}

query checkPendingViewerReviews($pullNodeID:ID!, $author: String!){
    node(id: $pullNodeID){
        __typename
        ...on PullRequest{
            reviews(author: $author, states: [PENDING], first: 1){
                totalCount
                nodes{
                    url
                }
            }
        }
    }
}

fragment  PRReviewComments on PullRequestReview{
    comments(first: 10,after:  $cursor){
        edges{
            __typename
            cursor
            node{
                ...pullRequestReviewComment
            }
        }
    }
}

fragment  pullRequestReviewComment on PullRequestReviewComment{
    id
    pullRequestReview {
        comments{
            totalCount
        }
    }
    databaseId
    author{
        ...actor
    }
    createdAt
    authorAssociation
    body
    bodyHTML
    lastEditedAt
    state
    diffHunk
    outdated
    isMinimized
    replyTo{
        id
    }
    path
    reactionGroups{
        ...reactionGroups
    }
    viewerCanDelete
    viewerCanUpdate
    viewerDidAuthor
    viewerCannotUpdateReasons
    viewerCanReact
    viewerCanMinimize
    pullRequest{
        number
    }
    repository{
        name
        owner{
            login
        }
    }
}
