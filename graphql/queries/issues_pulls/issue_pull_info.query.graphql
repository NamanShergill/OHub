query issuePullInfo($user: String!, $repo: String!, $number: Int!){
    repository(name: $repo, owner: $user){
        issueOrPullRequest(number: $number){
            __typename
            ... on Issue{
                ...issueInfo
            }
            ... on PullRequest{
                ...pullInfo
            }
        }
    }
}

query getReactors($id:ID!){
    node(id: $id){
        __typename
        ... on Issue{
           reactionGroups{
               ...reactorsGroup
           }
        }
        ... on PullRequest{
            reactionGroups{
                ...reactorsGroup
            }
        }
    }
}


mutation addReaction($id:ID!, $content:ReactionContent!){
    addReaction(input: {subjectId: $id, content: $content}){
        reaction{
            createdAt
        }
    }
}

mutation removeReaction($id:ID!, $content:ReactionContent!){
    removeReaction(input: {subjectId: $id, content: $content}){
        reaction{
            createdAt
        }
    }
}

query issuePullAssignees($user: String!, $repo: String!, $number: Int!, $after:String){
    repository(name: $repo, owner: $user){
        issueOrPullRequest(number: $number){
            __typename
            ... on Issue{
                ...assigneeUserList
            }... on PullRequest{
                ...assigneeUserList
            }
        }
    }
}

query issuePullParticipants($user: String!, $repo: String!, $number: Int!, $after:String){
    repository(name: $repo, owner: $user){
        issueOrPullRequest(number: $number){
            __typename
            ... on Issue{
                ...issueParticipantUserList
            }... on PullRequest{
                ...pullParticipantUserList
            }
        }
    }
}

fragment assigneeUserList on Assignable{
    assignees(after: $after, first: 10){
        edges {
            cursor
            node {
                ...actor
            }
        }
    }
}

fragment issueParticipantUserList on Issue{

    participants(after: $after, first: 10){
        edges {
            cursor
            node {
                ...actor
            }
        }
    }
}

fragment pullParticipantUserList on PullRequest{

    participants(after: $after, first: 10){
        edges {
            cursor
            node {
                ...actor
            }
        }
    }
}
