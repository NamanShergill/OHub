fragment addedToProject on AddedToProjectEvent{
    id
    createdAt
    actor{
        ...actor
    }

}

fragment assigned on AssignedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    assignee{
        __typename  ... on User {
            ...actor
        } ... on Bot {
            ...actor
        } ... on Mannequin {
            ...actor
        } ... on Organization {
            ...actor
        }
    }
}

fragment baseRefChanged on BaseRefChangedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    currentRefName
    previousRefName
}

fragment  baseRefDeleted on BaseRefDeletedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    baseRefName
}

fragment  baseRefForcePushed on BaseRefForcePushedEvent{
    id
    createdAt
    beforeCommit{
        abbreviatedOid
        url
    }
    afterCommit{
        url
        abbreviatedOid
    }
    ref{
        name
    }
    actor{
        ...actor
    }
}

fragment closed on ClosedEvent{
    id
    createdAt
    actor{
        ...actor
    }
}

fragment  convertedToDraft on ConvertToDraftEvent{
    id
    createdAt
    actor{
        ...actor
    }
}

fragment crossReference on CrossReferencedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    source{
        __typename  ... on Issue {
            ... issue
        } ... on PullRequest {
            ... pullRequest
        }
    }
    isCrossRepository
}

fragment deMileStoned on DemilestonedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    milestoneTitle
}

fragment  headRefDeleted on HeadRefDeletedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    headRefName
}

fragment  headRefForcePushed on HeadRefForcePushedEvent{
    id
    createdAt
    beforeCommit{
        abbreviatedOid
        url
    }
    afterCommit{
        url
        abbreviatedOid
    }
    ref{
        name
    }
    actor{
        ...actor
    }
}

fragment  headRefRestored on HeadRefRestoredEvent{
    id
    createdAt
    actor{
        ...actor
    }
}

fragment issueComment on IssueComment{
    id
    author{
        ...actor
    }
    createdAt
    authorAssociation
    body
    bodyHTML
    lastEditedAt
    isMinimized
    minimizedReason
    reactionGroups{
        ...reactionGroups
    }
    viewerCanMinimize
    viewerCanDelete
    viewerCanUpdate
    viewerDidAuthor
    viewerCannotUpdateReasons
    viewerCanReact
}

fragment labeled on LabeledEvent{
    id
    createdAt
    actor{
        ...actor
    }
    label{
    ...label
    }
}

fragment locked on LockedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    lockReason
}

fragment  markedAsDuplicate  on MarkedAsDuplicateEvent{
    id
    createdAt
    actor{
        ...actor
    }
    isCrossRepository
    canonical{
        __typename
        ... on Issue{
            ...issue
        } ... on PullRequest{
            ...pullRequest
        }
    }
}

fragment  merged on MergedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    mergeRefName
}

fragment mileStoned on MilestonedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    milestoneTitle
}

fragment movedColumnsInProject on MovedColumnsInProjectEvent{
    id
    createdAt
    actor{
        ...actor
    }
    #    previousProjectColumnName
    #    projectColumnName
    #    project{
    #        name
    #    }
}

fragment pinned on PinnedEvent{
    id
    createdAt
    actor{
        ...actor
    }
}

fragment pullRequestCommit on PullRequestCommit{
    id
    commit{
       ...commit
    }
}

fragment  pullRequestReview on PullRequestReview{
    id
    resourcePath
    comments(first: 1){
        totalCount
        edges {
            cursor
        }
    }
    author{
        ...actor
    }
    createdAt
    authorAssociation
    body
    bodyHTML
    lastEditedAt
    state
    reactionGroups{
        ...reactionGroups
    }
    viewerCanDelete
    viewerCanUpdate
    viewerDidAuthor
    viewerCannotUpdateReasons
    viewerCanReact
}

fragment  readyForReview on ReadyForReviewEvent{
    id
    createdAt
    actor{
        ...actor
    }
}

fragment removedFromProject on RemovedFromProjectEvent{
    id
    createdAt
    actor{
        ...actor
    }
    #    project{
    #        name
    #    }
    #    projectColumnName
}

fragment  renamedTitle on RenamedTitleEvent{
    id
    createdAt
    actor{
        ...actor
    }
    previousTitle
    currentTitle
}

fragment reopened on ReopenedEvent{
    id
    createdAt
    actor{
        ...actor
    }
}

fragment reviewDismissed on ReviewDismissedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    dismissalMessage
    dismissalMessageHTML
    previousReviewState
}

fragment reviewRequested on ReviewRequestedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    requestedReviewer{
        __typename
        ... on User{
            ...actor
        } ... on Team{
            avatar: avatarUrl
            name
        }
    }
}

fragment unassigned on UnassignedEvent{
    id
    createdAt
    actor{
        ...actor
    }
    assignee{
        __typename  ... on User {
            ...actor
        } ... on Bot {
            ...actor
        } ... on Mannequin {
            ...actor
        } ... on Organization {
            ...actor
        }
    }
}

fragment unlabeled on UnlabeledEvent{
    id
    createdAt
    actor{
        ...actor
    }
    label{
        ...label
    }
}

fragment unlocked on UnlockedEvent{
    id
    createdAt
    actor{
        ...actor
    }
}

fragment unmarkedAsDuplicate on UnmarkedAsDuplicateEvent{
    id
    createdAt
    actor{
        ...actor
    }
    isCrossRepository
    canonical{
        __typename
        ... on Issue{
            ...issue
        } ... on PullRequest{
            ...pullRequest
        }
    }
}

fragment unpinned on UnpinnedEvent{
    id
    createdAt
    actor{
        ...actor
    }
}


fragment actor on Actor{
    avatarUrl
    login
}

fragment pullRequest on PullRequest{
    url
    title
    number
    pullState: state
    repository{
        name
        nameWithOwner
    }
}

fragment issue on Issue{
    url
    title
    number
    issueState: state
   repository{
       name
       nameWithOwner
    }
}


fragment repo on Repository{
    url
    nameWithOwner
}

fragment  label on Label{
    color
    name
}

fragment commit on Commit{
    additions
    authoredDate
    oid
    message
    commitUrl

    messageHeadline
    author{
        avatarUrl
        name
        user{
           ...actor
        }
    }
}



fragment reactionGroups on ReactionGroup{
    content
    viewerHasReacted
    reactors{
        totalCount
    }
    subject{
        id
    }
}

fragment reactors on Reactor{
    ...actor
}

fragment reactorsGroup on ReactionGroup{
    content
    reactors(first: 11){
        edges{
            cursor
            node{
                __typename
                ... on User{
                    ...actor
                }
            }
        }
    }
}

fragment  pullRequestReviewComment on PullRequestReviewComment{
    id
    pullRequestReview {
        comments{
            totalCount
        }
    }
    databaseId
    author{
        ...actor
    }
    createdAt
    authorAssociation
    body
    bodyHTML
    lastEditedAt
    state
    diffHunk
    outdated
    isMinimized
    replyTo{
        id
    }
    path
    reactionGroups{
        ...reactionGroups
    }
    viewerCanDelete
    viewerCanUpdate
    viewerDidAuthor
    viewerCannotUpdateReasons
    viewerCanReact
    viewerCanMinimize
    pullRequest{
        number
    }
    repository{
        name
        owner{
            login
        }
    }
}

fragment  PRReviewComments on PullRequestReview{
    comments(first: 10,after:  $cursor){
        edges{
            __typename
            cursor
            node{
                ...pullRequestReviewComment
            }
        }
    }
}
